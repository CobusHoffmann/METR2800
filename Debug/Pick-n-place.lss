
Pick-n-place.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  0000026c  00000300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000026c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080010c  0080010c  0000030c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005bf  00000000  00000000  000003fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000343  00000000  00000000  000009bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003a5  00000000  00000000  00000cfe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000160  00000000  00000000  000010a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000295  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000016d  00000000  00000000  00001499  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001606  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e6       	ldi	r30, 0x6C	; 108
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  9e:	0c 94 34 01 	jmp	0x268	; 0x268 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <initADC>:
		ADC-pin: ADC0
		                                                                      */
		/************************************************************************/

		//Set Vref as external and select ADC0:
		ADMUX = (1<<REFS0);
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24

		//Set ADCSRA - ADC COntrol Register:
		ADCSRA = (1<<ADEN)|(1<<ADIE)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);
  ac:	8f e8       	ldi	r24, 0x8F	; 143
  ae:	80 93 7a 00 	sts	0x007A, r24
		//Disable Digital input on ADC0
		DIDR0 = (1<<ADC0D);
  b2:	81 e0       	ldi	r24, 0x01	; 1
  b4:	80 93 7e 00 	sts	0x007E, r24
  b8:	08 95       	ret

000000ba <initEF>:
	 * 	-PC1 for Electromagnet (EM)
	 * 	-PC2 for Infrared (IR) leds
	 */

	//Set the EM and IR Led pins as outputs
	DDRC = (1<<PORTC1)|(1<<PORTC2);
  ba:	86 e0       	ldi	r24, 0x06	; 6
  bc:	87 b9       	out	0x07, r24	; 7

	//Setup the analog to digital converter on ADC0
	initADC();
  be:	0e 94 53 00 	call	0xa6	; 0xa6 <initADC>
  c2:	08 95       	ret

000000c4 <analogRead>:
		DIDR0 = (1<<ADC0D);

}

int analogRead(){
	return analogVal;
  c4:	80 91 00 01 	lds	r24, 0x0100
  c8:	90 91 01 01 	lds	r25, 0x0101
}
  cc:	08 95       	ret

000000ce <startADC0>:
void startADC0(){
	/************************************************************************/
		/*
		Start analog to digital conversion on the ADC0 pin                      */
		/************************************************************************/
		ADCSRA |= (1<<ADSC);
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 64       	ori	r24, 0x40	; 64
  d6:	80 83       	st	Z, r24
  d8:	08 95       	ret

000000da <__vector_21>:
}

ISR(ADC_vect){
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
	/**
	 * This interrupt service routine will be called
	 * once the ADC converter finished on ADC0
	 */
	analogVal = ADC;
  e8:	80 91 78 00 	lds	r24, 0x0078
  ec:	90 91 79 00 	lds	r25, 0x0079
  f0:	90 93 01 01 	sts	0x0101, r25
  f4:	80 93 00 01 	sts	0x0100, r24
}
  f8:	9f 91       	pop	r25
  fa:	8f 91       	pop	r24
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <initTimer0>:

void initTimer0(){
	//Timers 8bit timer/counter0 must be initiated after sei()
	
	//Set CTC mode
	TCCR0A = (1<<WGM01);
 106:	82 e0       	ldi	r24, 0x02	; 2
 108:	84 bd       	out	0x24, r24	; 36
	
	//number of ticks for 400Hz frequency
	OCR0A = 20;
 10a:	94 e1       	ldi	r25, 0x14	; 20
 10c:	97 bd       	out	0x27, r25	; 39
	
	//Set the interrupt
	TIMSK0 = (1<<OCIE0A);
 10e:	80 93 6e 00 	sts	0x006E, r24
	
	//Set pre-scaler 1024, starts the timer
	TCCR0B =(1<<CS02)|(1<<CS00);	
 112:	85 e0       	ldi	r24, 0x05	; 5
 114:	85 bd       	out	0x25, r24	; 37
 116:	08 95       	ret

00000118 <main>:
#include "UART.h"
#include "end_effector.h"

int main(void){
	//Initialize stuff here
	initUART(MYUBRR);
 118:	87 e6       	ldi	r24, 0x67	; 103
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 c5 00 	call	0x18a	; 0x18a <initUART>
	initEF();		//Initialize the end effector
 120:	0e 94 5d 00 	call	0xba	; 0xba <initEF>
	sei();
 124:	78 94       	sei
	initTimer0();
 126:	0e 94 83 00 	call	0x106	; 0x106 <initTimer0>
	
	printStr(analogString);
 12a:	82 e0       	ldi	r24, 0x02	; 2
 12c:	91 e0       	ldi	r25, 0x01	; 1
 12e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <printStr>
	startADC0();	//Start conversion
 132:	0e 94 67 00 	call	0xce	; 0xce <startADC0>


	while(1){
		//Main loop
		
		itoa(analogRead(),str,10);
 136:	0e 94 62 00 	call	0xc4	; 0xc4 <analogRead>
 13a:	4a e0       	ldi	r20, 0x0A	; 10
 13c:	50 e0       	ldi	r21, 0x00	; 0
 13e:	6c e0       	ldi	r22, 0x0C	; 12
 140:	71 e0       	ldi	r23, 0x01	; 1
 142:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <itoa>
		printStr(str);
 146:	8c e0       	ldi	r24, 0x0C	; 12
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <printStr>
		startADC0();
 14e:	0e 94 67 00 	call	0xce	; 0xce <startADC0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	83 ed       	ldi	r24, 0xD3	; 211
 156:	90 e3       	ldi	r25, 0x30	; 48
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <main+0x40>
 160:	00 c0       	rjmp	.+0      	; 0x162 <main+0x4a>
 162:	00 00       	nop
 164:	e8 cf       	rjmp	.-48     	; 0x136 <main+0x1e>

00000166 <__vector_14>:
	
	//Set pre-scaler 1024, starts the timer
	TCCR0B =(1<<CS02)|(1<<CS00);	
}

ISR(TIMER0_COMPA_vect){
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
	//This service routine is run when Timer0 gets 40 ticks
	PORTC^=(1<<PORTC1);
 174:	98 b1       	in	r25, 0x08	; 8
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	89 27       	eor	r24, r25
 17a:	88 b9       	out	0x08, r24	; 8
	
}
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <initUART>:

	/*Calculate ubrr value*/


	/*Set baud rate */
	UBRR0H = (unsigned char)(ubrr>>8);
 18a:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char)ubrr;
 18e:	80 93 c4 00 	sts	0x00C4, r24
	/*Enable receiver and transmitter*/
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 192:	88 e1       	ldi	r24, 0x18	; 24
 194:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (3<<UCSZ00);
 198:	86 e0       	ldi	r24, 0x06	; 6
 19a:	80 93 c2 00 	sts	0x00C2, r24
 19e:	08 95       	ret

000001a0 <transmitUART>:

void transmitUART(unsigned char data){
	//Standard UART transmit from data sheet pg177

	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
 1a0:	e0 ec       	ldi	r30, 0xC0	; 192
 1a2:	f0 e0       	ldi	r31, 0x00	; 0
 1a4:	90 81       	ld	r25, Z
 1a6:	95 ff       	sbrs	r25, 5
 1a8:	fd cf       	rjmp	.-6      	; 0x1a4 <transmitUART+0x4>
	;
	/* Put data into buffer, sends the data */
	UDR0 = data;
 1aa:	80 93 c6 00 	sts	0x00C6, r24
 1ae:	08 95       	ret

000001b0 <printStr>:
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (3<<UCSZ00);

}

void printStr(unsigned char charArray[]){
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	ec 01       	movw	r28, r24
	 * over serial
	 */

	for(uint8_t i=0; i<(sizeof(charArray)+1); i++){

		if(charArray[i]){
 1b6:	88 81       	ld	r24, Y
 1b8:	81 11       	cpse	r24, r1
 1ba:	08 c0       	rjmp	.+16     	; 0x1cc <printStr+0x1c>
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <printStr+0x14>
			//Transmit each character individually
			transmitUART(charArray[i]);
 1be:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <transmitUART>
 1c2:	0f c0       	rjmp	.+30     	; 0x1e2 <printStr+0x32>
		}else{
			//Send new line charicter and exit for loop
			transmitUART('\n');
 1c4:	8a e0       	ldi	r24, 0x0A	; 10
 1c6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <transmitUART>
			break;
 1ca:	0b c0       	rjmp	.+22     	; 0x1e2 <printStr+0x32>

	for(uint8_t i=0; i<(sizeof(charArray)+1); i++){

		if(charArray[i]){
			//Transmit each character individually
			transmitUART(charArray[i]);
 1cc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <transmitUART>
	 * over serial
	 */

	for(uint8_t i=0; i<(sizeof(charArray)+1); i++){

		if(charArray[i]){
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	88 23       	and	r24, r24
 1d4:	b9 f3       	breq	.-18     	; 0x1c4 <printStr+0x14>
			//Transmit each character individually
			transmitUART(charArray[i]);
 1d6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <transmitUART>
	 * over serial
	 */

	for(uint8_t i=0; i<(sizeof(charArray)+1); i++){

		if(charArray[i]){
 1da:	8a 81       	ldd	r24, Y+2	; 0x02
 1dc:	81 11       	cpse	r24, r1
 1de:	ef cf       	rjmp	.-34     	; 0x1be <printStr+0xe>
 1e0:	f1 cf       	rjmp	.-30     	; 0x1c4 <printStr+0x14>
			break;
			

		}
	}
}
 1e2:	df 91       	pop	r29
 1e4:	cf 91       	pop	r28
 1e6:	08 95       	ret

000001e8 <itoa>:
 1e8:	45 32       	cpi	r20, 0x25	; 37
 1ea:	51 05       	cpc	r21, r1
 1ec:	20 f4       	brcc	.+8      	; 0x1f6 <itoa+0xe>
 1ee:	42 30       	cpi	r20, 0x02	; 2
 1f0:	10 f0       	brcs	.+4      	; 0x1f6 <itoa+0xe>
 1f2:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <__itoa_ncheck>
 1f6:	fb 01       	movw	r30, r22
 1f8:	10 82       	st	Z, r1
 1fa:	cb 01       	movw	r24, r22
 1fc:	08 95       	ret

000001fe <__itoa_ncheck>:
 1fe:	bb 27       	eor	r27, r27
 200:	4a 30       	cpi	r20, 0x0A	; 10
 202:	31 f4       	brne	.+12     	; 0x210 <__itoa_ncheck+0x12>
 204:	99 23       	and	r25, r25
 206:	22 f4       	brpl	.+8      	; 0x210 <__itoa_ncheck+0x12>
 208:	bd e2       	ldi	r27, 0x2D	; 45
 20a:	90 95       	com	r25
 20c:	81 95       	neg	r24
 20e:	9f 4f       	sbci	r25, 0xFF	; 255
 210:	0c 94 0b 01 	jmp	0x216	; 0x216 <__utoa_common>

00000214 <__utoa_ncheck>:
 214:	bb 27       	eor	r27, r27

00000216 <__utoa_common>:
 216:	fb 01       	movw	r30, r22
 218:	55 27       	eor	r21, r21
 21a:	aa 27       	eor	r26, r26
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	aa 1f       	adc	r26, r26
 222:	a4 17       	cp	r26, r20
 224:	10 f0       	brcs	.+4      	; 0x22a <__utoa_common+0x14>
 226:	a4 1b       	sub	r26, r20
 228:	83 95       	inc	r24
 22a:	50 51       	subi	r21, 0x10	; 16
 22c:	b9 f7       	brne	.-18     	; 0x21c <__utoa_common+0x6>
 22e:	a0 5d       	subi	r26, 0xD0	; 208
 230:	aa 33       	cpi	r26, 0x3A	; 58
 232:	08 f0       	brcs	.+2      	; 0x236 <__utoa_common+0x20>
 234:	a9 5d       	subi	r26, 0xD9	; 217
 236:	a1 93       	st	Z+, r26
 238:	00 97       	sbiw	r24, 0x00	; 0
 23a:	79 f7       	brne	.-34     	; 0x21a <__utoa_common+0x4>
 23c:	b1 11       	cpse	r27, r1
 23e:	b1 93       	st	Z+, r27
 240:	11 92       	st	Z+, r1
 242:	cb 01       	movw	r24, r22
 244:	0c 94 24 01 	jmp	0x248	; 0x248 <strrev>

00000248 <strrev>:
 248:	dc 01       	movw	r26, r24
 24a:	fc 01       	movw	r30, r24
 24c:	67 2f       	mov	r22, r23
 24e:	71 91       	ld	r23, Z+
 250:	77 23       	and	r23, r23
 252:	e1 f7       	brne	.-8      	; 0x24c <strrev+0x4>
 254:	32 97       	sbiw	r30, 0x02	; 2
 256:	04 c0       	rjmp	.+8      	; 0x260 <strrev+0x18>
 258:	7c 91       	ld	r23, X
 25a:	6d 93       	st	X+, r22
 25c:	70 83       	st	Z, r23
 25e:	62 91       	ld	r22, -Z
 260:	ae 17       	cp	r26, r30
 262:	bf 07       	cpc	r27, r31
 264:	c8 f3       	brcs	.-14     	; 0x258 <strrev+0x10>
 266:	08 95       	ret

00000268 <_exit>:
 268:	f8 94       	cli

0000026a <__stop_program>:
 26a:	ff cf       	rjmp	.-2      	; 0x26a <__stop_program>
